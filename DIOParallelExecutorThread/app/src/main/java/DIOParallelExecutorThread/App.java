/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DIOParallelExecutorThread;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import com.google.common.base.Function;

public class App {

    public static void main(String[] args) {
        
        // array to be manipulate in this App
        int[] arraySample = new int[150];

        // fill array
        fillArray(arraySample);

        // create executor
        ExecutorService executor = Executors.newFixedThreadPool(4);
        Future<Integer> future;

        // multiply every element of the array by 2
        for (int i = 0; i < arraySample.length; i++) {
            future = executor.submit(new multiplyCallable(i, arraySample));
            try {
                arraySample[i] = future.get();
            } catch (Exception e) {
                System.out.println("Error to multiply the array.");
            }
        }

        // finish executor
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.DAYS);
        } catch (Exception e) {
            System.out.println("Failed to wait function");
        }

        // print final result
        for (int j = 0; j < arraySample.length; j++) {
            System.out.println("ActualArray[" + j + "] == " + arraySample[j]);
        }
    }

    public static void fillArray(int[] array) {
        
        int size = array.length;

        if (size < 1) {
            return;
        }

        for (int i = 0; i < size; i++ ) {
            array[i] = i * 2;
            System.out.println("ArraySample [" + i + "] == "+ array[i]);
        }
    }
}

class multiplyCallable implements Callable<Integer> {

    int index;
    int[] array;

    public multiplyCallable(Integer index, int[] array) {
        this.index = index;
        this.array = array;
    }

    @Override
    public Integer call() throws Exception {
        array[index] *= 2;
        return array[index];
    }

}
