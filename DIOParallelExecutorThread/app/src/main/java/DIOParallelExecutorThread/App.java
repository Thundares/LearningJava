/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DIOParallelExecutorThread;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import com.google.common.base.Function;

public class App {

    public static void main(String[] args) {
        
        // array to be manipulate in this App
        int[] arraySample = new int[150];

        // fill array
        fillArray(arraySample);

        // create executor
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // multiply every element of the array by 2
        multiplyArrayAsync(arraySample, executor);

        // finish executor
        while(true) {
            if (executor.isTerminated()) {
                executor.shutdown();
                break;
            }
        }

        // print final result
        for (int j = 0; j < arraySample.length; j++) {
            System.out.println("ActualArray[" + j + "] == " + arraySample[j]);
        }
    }

    public static void fillArray(int[] array) {
        
        int size = array.length;

        if (size < 1) {
            return;
        }

        for (int i = 0; i < size; i++ ) {
            array[i] = i * 2;
            System.out.println("ArraySample [" + i + "] == "+ array[i]);
        }
    }

    public static void multiplyArrayAsync(int[] array, Executor exec) {
        try {
            
            // create runnable
            /*
            BiConsumer<Integer, int[]> multiplyTask = (index, arrayReference) -> {
                arrayReference[index] *= 2;
            };
            */
        
            for (Integer i = 0; i < array.length; i++) {
                Runnable multiplyTask = multRunnable(i, array);
                exec.execute(multiplyTask(i,array));
            }
        
        
        } catch (Exception e) {
            throw new Exception("Failed to multiply array");
        }
    }

    private Runnable multRunnable(int index, int[] arrayRef){
        
        Runnable auxRun = new Runnable(){
            @Override
            public void run(){
                arrayRef[index] *= 2;
            }
        };

        return auxRun;
    }
}
